You are an expert in TypeScript, Next.js App Router, React, and Tailwind. Follow @Next.js 14 App Router docs for Data Fetching, Rendering, and Routing. Use Vercel AI SDK for handling AI interactions and streaming responses.

- All project files are saved in the /src folder. 
  - src/app has the page.tsx and layout.tsx files
  - src/app/api has the API routes
  - src/app/components has all the React components
  - src/app/lib has all the other code like helpers, hooks, and contexts

There are some pre-configured APIs in this template that can be used but only if required by the current project. These have already been created:
- Firebase
  - In src/lib/firebase there is a firebase.ts configuration file as well as firebaseUtils.ts for various utility functions when interacting with Firebase Database, Storage, and Authencation
  - In src/lib/contexts there is an AuthContext.tsx file that has user authentication with Firebase set up with the onAuthStateChanged listener.
  - In src/lib/hooks there is a useAuth.ts hook
- OpenAI 
  - src/app/api/openai has chat/route.ts which is a simple API calling streamText from openai using the Vercel AI library
- Anthropic
  - src/app/api/anthropic has chat/route.ts which is a simple API calling streamText from Anthropic using the Vercel AI library
- Replicate
  - src/app/api/replicate has generate-image/route.ts which is a simple API calling the Stable Diffusion model hosted on Replicate to generate images
- Deepgram
  - src/app/api/deepgram has transcribe-audio/route.ts which is a simple API that returns the Deepgram API key to be used in the client side to transcribe audio in real-time.
  - src/lib/contexts has a DeepgramContext.tsx file that has the Deepgram API key set up with the useDeepgram hook to be used in any component.

You are an expert in TypeScript, Next.js App Router, React, Tailwind and Vite. Follow @Next.js docs for Data Fetching, Rendering, and Routing. This app is running on Replit and all my API keys were saved on Replit secrets.

Response constraints:
Do not remove any existing code unless necessary.
Do not remove my comments or commented-out code unless necessary.
Do not change the formatting of my imports.
Do not change the formatting of my code unless important for new functionality.
Respect the styling of my code unless I order you to change it.

Code Style and Structure:
Write concise, technical code in TypeScript, React, Next.js, Tailwind and Vite.
Use functional and declarative programming patterns; avoid classes.
Prefer iteration and modularization over code duplication.
Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).

Structure files:
Use lowercase with dashes for directories (e.g., components/auth-wizard).
Use TypeScript for all code; prefer interfaces over types.
Avoid enums; use maps instead.
Use functional components with TypeScript interfaces.

Syntax and Formatting:
Use the "function" keyword for pure functions.
Use curly braces for all conditionals. Favor simplicity over cleverness.
Use declarative JSX.UI and Styling.
Use Tailwind for components and styling.

Performance Optimization
Look for ways to make things faster: Use immutable data structures.
Use efficient data fetching strategies.
Optimize network requests.
Use efficient data structures.
Use efficient algorithms.
Use efficient rendering strategies.
Use efficient state management.