generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(cuid())
  email      String      @unique
  name       String?
  image      String?
  accounts   Account[]
  sessions   Session[]
  timeSeries TimeSeries[]
  dataTools  DataTool[]
  analyticsCollections AnalyticsCollection[]
}

model TimeSeries {
  id         String   @id @default(cuid())
  userId     String
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  dataPoints Json
  user       User     @relation(fields: [userId], references: [id])
}

model DataTool {
  id               String   @id @default(cuid())
  userId           String
  name             String
  url              String?
  googleAnalyticsId String?
  status           String   @default("active") // active, inactive
  progressGA       Int      @default(0) // Google Analytics progress percentage
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id])
  analyticsCollections AnalyticsCollection[]
}

model AnalyticsCollection {
  id               String   @id @default(cuid())
  userId           String
  dataToolId       String
  toolName         String
  collectionDate   DateTime @default(now())
  timePeriod       String   // e.g., "30 days"
  dataLayers       Json     // Array of data layers collected
  data             Json     // The actual analytics data
  dataSource       String   @default("google-analytics") // google-analytics, mock-data
  totalRecords     Int      @default(0)
  status           String   @default("collected") // collected, processing, failed
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id])
  dataTool         DataTool @relation(fields: [dataToolId], references: [id])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? 
  access_token       String? 
  expires_at         Int?    
  token_type         String? 
  scope              String? 
  id_token           String? 
  session_state      String? 
  user               User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
} 